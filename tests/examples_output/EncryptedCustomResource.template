{
    "Description": "Example template showing Demonstration of encryption using KMS in a CloudFormation Template. For information on AWS Lambda-backed Custom Resources see:http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources-lambda.html Inspired by https://github.com/RealSalmon/lambda-backed-cloud-formation-kms-encryption",
    "Outputs": {
        "EncryptedCustomResource0CipherText": {
            "Description": "KMS encrypted value of SecretParameter (Base64 encoded)",
            "Value": {
                "Fn::GetAtt": [
                    "EncryptedCustomResource0",
                    "CipherText"
                ]
            }
        },
        "EncryptedCustomResource1CipherText": {
            "Description": "KMS encrypted value of SecretParameter (Base64 encoded)",
            "Value": {
                "Fn::GetAtt": [
                    "EncryptedCustomResource1",
                    "CipherText"
                ]
            }
        },
        "EncryptedCustomResource2CipherText": {
            "Description": "KMS encrypted value of SecretParameter (Base64 encoded)",
            "Value": {
                "Fn::GetAtt": [
                    "EncryptedCustomResource2",
                    "CipherText"
                ]
            }
        },
        "KmsKey0Arn": {
            "Value": {
                "Fn::GetAtt": [
                    "KMSKey0",
                    "Arn"
                ]
            }
        },
        "KmsKey1Arn": {
            "Value": {
                "Fn::GetAtt": [
                    "KMSKey1",
                    "Arn"
                ]
            }
        },
        "KmsKey2Arn": {
            "Value": {
                "Fn::GetAtt": [
                    "KMSKey2",
                    "Arn"
                ]
            }
        }
    },
    "Parameters": {
        "SecretParameter0": {
            "NoEcho": true,
            "Type": "String"
        },
        "SecretParameter1": {
            "NoEcho": true,
            "Type": "String"
        },
        "SecretParameter2": {
            "NoEcho": true,
            "Type": "String"
        }
    },
    "Resources": {
        "CloudFormationKMSResourceLambdaFunction": {
            "Properties": {
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "import base64",
                                "import uuid",
                                "import httplib",
                                "import urlparse",
                                "import json",
                                "import boto3",
                                "",
                                "def send_response(request, response, status=None, reason=None):",
                                "    ''' Send our response to the pre-signed URL supplied by CloudFormation",
                                "",
                                "    If no ResponseURL is found in the request, there is no place to send a",
                                "    response. This may be the case if the supplied event was for testing.",
                                "    '''",
                                "",
                                "    if status is not None:",
                                "        response['Status'] = status",
                                "",
                                "    if reason is not None:",
                                "        response['Reason'] = reason",
                                "",
                                "    if 'ResponseURL' in request and request['ResponseURL']:",
                                "        url = urlparse.urlparse(request['ResponseURL'])",
                                "        body = json.dumps(response)",
                                "        https = httplib.HTTPSConnection(url.hostname)",
                                "        https.request('PUT', url.path+'?'+url.query, body)",
                                "",
                                "    return response",
                                "",
                                "def handler(event, context):",
                                "",
                                "    response = {",
                                "        'StackId': event['StackId'],",
                                "        'RequestId': event['RequestId'],",
                                "        'LogicalResourceId': event['LogicalResourceId'],",
                                "        'Status': 'SUCCESS'",
                                "    }",
                                "",
                                "    # PhysicalResourceId is meaningless here, but CloudFormation requires it",
                                "    if 'PhysicalResourceId' in event:",
                                "        response['PhysicalResourceId'] = event['PhysicalResourceId']",
                                "    else:",
                                "        response['PhysicalResourceId'] = str(uuid.uuid4())",
                                "",
                                "    # There is nothing to do for a delete request",
                                "    if event['RequestType'] == 'Delete':",
                                "        return send_response(event, response)",
                                "",
                                "    # Encrypt the value using AWS KMS and return the response",
                                "    try:",
                                "",
                                "        for key in ['KeyId', 'PlainText']:",
                                "            if key not in event['ResourceProperties'] or not event['ResourceProperties'][key]:",
                                "                return send_response(",
                                "                    event, response, status='FAILED',",
                                "                    reason='The properties KeyId and PlainText must not be empty'",
                                "                )",
                                "",
                                "        client = boto3.client('kms')",
                                "        encrypted = client.encrypt(",
                                "            KeyId=event['ResourceProperties']['KeyId'],",
                                "            Plaintext=event['ResourceProperties']['PlainText']",
                                "        )",
                                "",
                                "        response['Data'] = {",
                                "            'CipherText': base64.b64encode(encrypted['CiphertextBlob']).decode('utf-8')",
                                "        }",
                                "        response['Reason'] = 'The value was successfully encrypted'",
                                "",
                                "    except Exception as E:",
                                "        response['Status'] = 'FAILED'",
                                "        response['Reason'] = 'UnhandledException: {}, check cloudwatch logs'.format(E)",
                                "",
                                "    return send_response(event, response)"
                            ]
                        ]
                    }
                },
                "Handler": "index.handler",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaExecutionRole",
                        "Arn"
                    ]
                },
                "Runtime": "python2.7",
                "Timeout": "3"
            },
            "Type": "AWS::Lambda::Function"
        },
        "EncryptedCustomResource0": {
            "Properties": {
                "KeyId": {
                    "Ref": "KMSKey0"
                },
                "PlainText": {
                    "Ref": "SecretParameter0"
                },
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CloudFormationKMSResourceLambdaFunction",
                        "Arn"
                    ]
                }
            },
            "Type": "AWS::CloudFormation::CustomResource"
        },
        "EncryptedCustomResource1": {
            "Properties": {
                "KeyId": {
                    "Ref": "KMSKey1"
                },
                "PlainText": {
                    "Ref": "SecretParameter1"
                },
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CloudFormationKMSResourceLambdaFunction",
                        "Arn"
                    ]
                }
            },
            "Type": "AWS::CloudFormation::CustomResource"
        },
        "EncryptedCustomResource2": {
            "Properties": {
                "KeyId": {
                    "Ref": "KMSKey2"
                },
                "PlainText": {
                    "Ref": "SecretParameter2"
                },
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CloudFormationKMSResourceLambdaFunction",
                        "Arn"
                    ]
                }
            },
            "Type": "AWS::CloudFormation::CustomResource"
        },
        "KMSKey0": {
            "Properties": {
                "Description": "Lambda backed cloudformation KMS encryption custom resource encryption master key",
                "EnableKeyRotation": "true",
                "Enabled": "true",
                "KeyPolicy": {
                    "Id": "key-default-1",
                    "Statement": [
                        {
                            "Action": [
                                "kms:*"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "AWS": {
                                    "Fn::Join": [
                                        ":",
                                        [
                                            "arn:aws:iam:",
                                            {
                                                "Ref": "AWS::AccountId"
                                            },
                                            "root"
                                        ]
                                    ]
                                }
                            },
                            "Resource": [
                                "*"
                            ],
                            "Sid": "Enable IAM User Permissions"
                        },
                        {
                            "Action": [
                                "kms:Encrypt"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "AWS": {
                                    "Fn::GetAtt": [
                                        "LambdaExecutionRole",
                                        "Arn"
                                    ]
                                }
                            },
                            "Resource": [
                                "*"
                            ],
                            "Sid": "Allow use of the key"
                        }
                    ],
                    "Version": "2012-10-17"
                }
            },
            "Type": "AWS::KMS::Key"
        },
        "KMSKey1": {
            "Properties": {
                "Description": "Lambda backed cloudformation KMS encryption custom resource encryption master key",
                "EnableKeyRotation": "true",
                "Enabled": "true",
                "KeyPolicy": {
                    "Id": "key-default-1",
                    "Statement": [
                        {
                            "Action": [
                                "kms:*"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "AWS": {
                                    "Fn::Join": [
                                        ":",
                                        [
                                            "arn:aws:iam:",
                                            {
                                                "Ref": "AWS::AccountId"
                                            },
                                            "root"
                                        ]
                                    ]
                                }
                            },
                            "Resource": [
                                "*"
                            ],
                            "Sid": "Enable IAM User Permissions"
                        },
                        {
                            "Action": [
                                "kms:Encrypt"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "AWS": {
                                    "Fn::GetAtt": [
                                        "LambdaExecutionRole",
                                        "Arn"
                                    ]
                                }
                            },
                            "Resource": [
                                "*"
                            ],
                            "Sid": "Allow use of the key"
                        }
                    ],
                    "Version": "2012-10-17"
                }
            },
            "Type": "AWS::KMS::Key"
        },
        "KMSKey2": {
            "Properties": {
                "Description": "Lambda backed cloudformation KMS encryption custom resource encryption master key",
                "EnableKeyRotation": "true",
                "Enabled": "true",
                "KeyPolicy": {
                    "Id": "key-default-1",
                    "Statement": [
                        {
                            "Action": [
                                "kms:*"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "AWS": {
                                    "Fn::Join": [
                                        ":",
                                        [
                                            "arn:aws:iam:",
                                            {
                                                "Ref": "AWS::AccountId"
                                            },
                                            "root"
                                        ]
                                    ]
                                }
                            },
                            "Resource": [
                                "*"
                            ],
                            "Sid": "Enable IAM User Permissions"
                        },
                        {
                            "Action": [
                                "kms:Encrypt"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "AWS": {
                                    "Fn::GetAtt": [
                                        "LambdaExecutionRole",
                                        "Arn"
                                    ]
                                }
                            },
                            "Resource": [
                                "*"
                            ],
                            "Sid": "Allow use of the key"
                        }
                    ],
                    "Version": "2012-10-17"
                }
            },
            "Type": "AWS::KMS::Key"
        },
        "LambdaExecutionRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            }
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "logs:PutLogEvents",
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        },
                        "PolicyName": "root"
                    }
                ]
            },
            "Type": "AWS::IAM::Role"
        }
    }
}
